C51 COMPILER V9.60.7.0   STUFF                                                             02/28/2023 14:04:32 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE STUFF
OBJECT MODULE PLACED IN .\Objects\stuff.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE stuff.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\stu
                    -ff.lst) TABS(2) OBJECT(.\Objects\stuff.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"
   3          
   4          code unsigned char display_msg1[]="  START PROGRAM ";           //Display msg on 1st line of lcd
   5          code unsigned char display_msg2[]="   FIRST INPUT  ";           //Display msg on 2nd line of lcd
   6          code unsigned char display_msg3[]="   NEXT INPUT   ";
   7          code unsigned char display_msg4[]="   SORTING...   ";
   8          code unsigned char display_msg5[]="     SORTING    ";
   9          code unsigned char display_msg6[]="    COMPLETED   ";
  10          code unsigned char display_msg7[]="  NUMBER TO BE  ";
  11          code unsigned char display_msg8[]="    SEARCHED    ";
  12          code unsigned char display_msg9[]="  THE INDEX IS  ";
  13          code unsigned char display_msg10[]="     NUMBER     ";
  14          code unsigned char display_msg11[]="    NOT FOUND   ";
  15          unsigned char a,b;
  16          unsigned char arr[5];
  17          int i,j,k,m,index,flag,n;
  18          unsigned char index1;
  19          
  20          void main()
  21          {
  22   1        lcd_init();
  23   1        P1=0x0F;
  24   1        lcd_cmd(0x80);                          //Move cursor to first line
  25   1        msdelay(4);
  26   1        lcd_write_string(display_msg1);                       
  27   1        msdelay(5000);
  28   1        lcd_cmd(0x80);                          //Move cursor to first line
  29   1        msdelay(4);
  30   1        lcd_write_string(display_msg2); 
  31   1        P1 = P1 | 0x0F;
  32   1        msdelay(5000);
  33   1        b = P1;
  34   1        b = P1 & 0x0F;
  35   1        arr[0] = b;
  36   1        a = b;
  37   1        a = a << 4;
  38   1        P1 = a;
  39   1        lcd_cmd(0x80);                          //Move cursor to first line
  40   1        msdelay(4);
  41   1        lcd_write_string(display_msg3); 
  42   1        P1 = P1 | 0x0F;
  43   1        msdelay(5000);
  44   1        for(i=1; i<4; i++){
  45   2        b = P1;
  46   2        b = b & 0x0F;
  47   2        arr[i]= b;
  48   2        a = b;
  49   2        a = a << 4;
  50   2        P1=0x0F;
  51   2        msdelay(1000);
  52   2        P1 = a;
  53   2        lcd_cmd(0x80);                          //Move cursor to first line
  54   2        msdelay(4);
C51 COMPILER V9.60.7.0   STUFF                                                             02/28/2023 14:04:32 PAGE 2   

  55   2        lcd_write_string(display_msg3);
  56   2        P1 = P1 | 0x0F; 
  57   2        msdelay(5000);}
  58   1        b = P1;
  59   1        b = b & 0x0F;
  60   1        arr[4]= b;
  61   1        a = b;
  62   1        a = a << 4;
  63   1        P1=0x0F;
  64   1        msdelay(1000);
  65   1        P1 = a;
  66   1        lcd_cmd(0x80);                          //Move cursor to first line
  67   1        msdelay(4);
  68   1        lcd_write_string(display_msg4);
  69   1        msdelay(5000);
  70   1        P1 = 0x0F;
  71   1        lcd_cmd(0x80);                          //Move cursor to first line
  72   1        msdelay(4);
  73   1        lcd_write_string(display_msg5);
  74   1        lcd_cmd(0xC0);
  75   1        msdelay(4);
  76   1        lcd_write_string(display_msg6);
  77   1        msdelay(1000);
  78   1        for(k=0; k<4; k++){
  79   2          for(j=0; j<4-k; j++){
  80   3          if(arr[j]>arr[j+1]){
  81   4            char temp = arr[j+1];
  82   4            arr[j+1] = arr[j];
  83   4            arr[j] = temp;}}}
  84   1        for(m=0; m<5; m++){
  85   2          a = arr[m];
  86   2          a = a << 4;
  87   2          P1 = a;
  88   2          msdelay(5000);
  89   2          P1 = 0x0F;
  90   2          msdelay(1000);}
  91   1        P1 = 0xFF;
  92   1        lcd_cmd(0x80);
  93   1        msdelay(4);
  94   1        lcd_write_string(display_msg7);
  95   1        lcd_cmd(0xC0);
  96   1        msdelay(4);
  97   1        lcd_write_string(display_msg8);
  98   1        P1 = P1 | 0x0F;
  99   1        msdelay(5000);
 100   1        b = P1;
 101   1        b = b & 0x0F;
 102   1        a = b;
 103   1        a = a << 4;
 104   1        a = a >> 4;
 105   1        lcd_cmd(0x01);
 106   1        P1 = 0x0F;
 107   1        msdelay(1000);
 108   1          flag = 0;
 109   1        for(n=0; n<5; n++){
 110   2          if(a == arr[n]){
 111   3            flag = 1; 
 112   3            index = n+1;
 113   3            index1 = index + '0';
 114   3            index1 = index1 << 4;}}
 115   1        if(flag == 1){
 116   2        lcd_cmd(0x80);
C51 COMPILER V9.60.7.0   STUFF                                                             02/28/2023 14:04:32 PAGE 3   

 117   2        msdelay(4);
 118   2        lcd_write_string(display_msg9);
 119   2        P1 = index1;
 120   2        msdelay(5000);}
 121   1        if(flag == 0){
 122   2        lcd_cmd(0x80);
 123   2        msdelay(4);
 124   2        lcd_write_string(display_msg10);
 125   2        lcd_cmd(0xC0);
 126   2        msdelay(4);
 127   2        lcd_write_string(display_msg11);
 128   2        msdelay(5000);}
 129   1          
 130   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    765    ----
   CONSTANT SIZE    =    187    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
